{"version":3,"file":"Simple-89f0d5ed.js","sources":["../../../core/dist/renderer/dragUtils.js","../../../core/dist/renderer/AttrMapSvg.js","../../../core/dist/renderer/AttrHelper.js","../../../core/dist/renderer/Circle.js","../../../core/dist/renderer/Ellipse.js","../../../core/dist/renderer/Equation.js","../../../core/dist/renderer/not_found.js","../../../core/dist/renderer/Image.js","../../../core/dist/renderer/Line.js","../../../core/dist/renderer/Path.js","../../../core/dist/renderer/Polygon.js","../../../core/dist/renderer/Polyline.js","../../../core/dist/renderer/Rectangle.js","../../../core/dist/renderer/Text.js","../../../core/dist/renderer/shapeMap.js","../../../core/dist/renderer/Renderer.js","../../../core/dist/index.js","../../src/fetchPathResolver.ts","../../src/Simple.tsx"],"sourcesContent":["import { genOptProblem } from \"@penrose/optimizer\";\n/**\n * Retrieve data from drag events and update varying state accordingly\n */\nexport const dragUpdate = (state, id, dx, dy) => {\n    const xs = [...state.varyingValues];\n    const { constraintSets, optStages } = state;\n    const { inputMask, objMask, constrMask } = constraintSets.get(optStages[0]);\n    const gradMask = [...inputMask];\n    for (const shape of state.shapes) {\n        if (shape.properties.name.contents === id) {\n            for (const id of dragShape(shape, [dx, dy], xs)) {\n                gradMask[id] = false;\n            }\n        }\n    }\n    const updated = Object.assign(Object.assign({}, state), { params: genOptProblem(gradMask, objMask, constrMask), varyingValues: xs });\n    return updated;\n};\n// TODO: factor out position props in shapedef\n// return: a list of updated ids\nconst dragShape = (shape, offset, xs) => {\n    const { shapeType, properties } = shape;\n    switch (shapeType) {\n        case \"Path\":\n            console.log(\"Path drag unimplemented\", shape); // Just to prevent crashing on accidental drag\n            return [];\n        case \"Polygon\":\n            console.log(\"Polygon drag unimplemented\", shape); // Just to prevent crashing on accidental drag\n            return [];\n        case \"Polyline\":\n            console.log(\"Polyline drag unimplemented\", shape); // Just to prevent crashing on accidental drag\n            return [];\n        case \"Line\":\n            return moveProperties(properties, [\"start\", \"end\"], offset, xs);\n        default:\n            return moveProperties(properties, [\"center\"], offset, xs);\n    }\n};\n/**\n * For each of the specified properties listed in `propPairs`, subtract a number from the original value.\n */\nconst moveProperties = (properties, propsToMove, [dx, dy], xs) => {\n    const ids = [];\n    for (const propertyID of propsToMove) {\n        const value = properties[propertyID];\n        if (value.tag === \"VectorV\") {\n            const [x, y] = value.contents;\n            if (typeof x !== \"number\" && x.tag === \"Input\") {\n                xs[x.key] += dx;\n                ids.push(x.key);\n            }\n            if (typeof y !== \"number\" && y.tag === \"Input\") {\n                xs[y.key] += dy;\n                ids.push(y.key);\n            }\n        }\n    }\n    return ids;\n};\n//# sourceMappingURL=dragUtils.js.map","/**\n * Mapping from internal \"non-kebab\" Penrose names to SVG \"kebab\" names\n */\nexport const attrMapSvg = {\n    accentHeight: \"accent-height\",\n    alignmentBaseline: \"alignment-baseline\",\n    arabicForm: \"arabic-form\",\n    baselineShift: \"baseline-shift\",\n    capHeight: \"cap-height\",\n    clipPath: \"clip-path\",\n    clipRule: \"clip-rule\",\n    colorInterpolation: \"color-interpolation\",\n    colorInterpolationFilters: \"color-interpolation-filters\",\n    colorProfile: \"color-profile\",\n    colorRendering: \"color-rendering\",\n    dominantBaseline: \"dominant-baseline\",\n    enableBackground: \"enable-background\",\n    fillOpacity: \"fill-opacity\",\n    fillRule: \"fill-rule\",\n    floodColor: \"flood-color\",\n    floodOpacity: \"flood-opacity\",\n    fontFamily: \"font-family\",\n    fontSize: \"font-size\",\n    fontSizeAdjust: \"font-size-adjust\",\n    fontStretch: \"font-stretch\",\n    fontStyle: \"font-style\",\n    fontVariant: \"font-variant\",\n    fontWeight: \"font-weight\",\n    glyphName: \"glyph-name\",\n    glyphOrientationHorizontal: \"glyph-orientation-horizontal\",\n    glyphOrientationVertical: \"glyph-orientation-vertical\",\n    horizAdvX: \"horiz-adv-x\",\n    horizOriginX: \"horiz-origin-x\",\n    imageRendering: \"image-rendering\",\n    letterSpacing: \"letter-spacing\",\n    lightingColor: \"lighting-color\",\n    markerEnd: \"marker-end\",\n    markerMid: \"marker-mid\",\n    markerStart: \"marker-start\",\n    overlinePosition: \"overline-position\",\n    overlineThickness: \"overline-thickness\",\n    panose1: \"panose-1\",\n    paintOrder: \"paint-order\",\n    pointerEvents: \"pointer-events\",\n    renderingIntent: \"rendering-intent\",\n    shapeRendering: \"shape-rendering\",\n    stopColor: \"stop-color\",\n    stopOpacity: \"stop-opacity\",\n    strikethroughPosition: \"strikethrough-position\",\n    strikethroughThickness: \"strikethrough-thickness\",\n    strokeDasharray: \"stroke-dasharray\",\n    strokeDashoffset: \"stroke-dashoffset\",\n    strokeLinecap: \"stroke-linecap\",\n    strokeLinejoin: \"stroke-linejoin\",\n    strokeMiterlimit: \"stroke-miterlimit\",\n    strokeOpacity: \"stroke-opacity\",\n    strokeWidth: \"stroke-width\",\n    textAnchor: \"text-anchor\",\n    textDecoration: \"text-decoration\",\n    textRendering: \"text-rendering\",\n    transformOrigin: \"transform-origin\",\n    underlinePosition: \"underline-position\",\n    underlineThickness: \"underline-thickness\",\n    unicodeBidi: \"unicode-bidi\",\n    unicodeRange: \"unicode-range\",\n    unitsPerEm: \"units-per-em\",\n    vAlphabetic: \"v-alphabetic\",\n    vHanging: \"v-hanging\",\n    vIdeographic: \"v-ideographic\",\n    vMathematical: \"v-mathematical\",\n    vectorEffect: \"vector-effect\",\n    vertAdvY: \"vert-adv-y\",\n    vertOriginX: \"vert-origin-x\",\n    vertOriginY: \"vert-origin-y\",\n    wordSpacing: \"word-spacing\",\n    writingMode: \"writing-mode\",\n};\n//# sourceMappingURL=AttrMapSvg.js.map","/**\n * Provides an assortment of utility functions shared across shapes that computes\n * output SVG properties using the optimized shape properties as input.\n */\nimport { toFontRule } from \"../utils/CollectLabels\";\nimport { toScreen, toSvgOpacityProperty, toSvgPaintProperty } from \"../utils/Util\";\nimport { attrMapSvg } from \"./AttrMapSvg\";\n/**\n * Auto-map to SVG any input properties for which we lack specific logic.\n *\n * Apply a map, AttrMapSvg, to perform any target-specific property name translation,\n * i.e., map from Penrose camel case formal to SVG mixed-case/kebab format.  Property names\n * not found in the map are mapped straight across.\n *\n * Note: Right now we are neither validating the SVG property names nor its contents.  The\n * thinking is to add an optional validator to the end of the pipeline at some point rather\n * than implement validation for all passthrough SVG properties inside Penrose.\n *\n * Note: This is an \"escape hatch\" for \"passthrough\" SVG properties we don't currently support.\n *\n * Note: SVG property names are case sensitive.\n */\nexport const attrAutoFillSvg = ({ properties }, elem, attrAlreadyMapped) => {\n    // Internal properties to never auto-map to SVG\n    const attrToNeverAutoMap = [\n        \"strokeStyle\",\n        \"name\",\n        \"ensureOnCanvas\",\n    ];\n    // Merge the mapped and never-map properties.  Convert to Set\n    const attrToNotAutoMap = new Set(attrAlreadyMapped.concat(attrToNeverAutoMap));\n    // Map unknown/unseen attributes with values to SVG output.\n    // This is the \"escape hatch\" for properties we don't support.\n    //\n    // NOTE: `style` is handled as a special case, because some of\n    // the built-in properties will write to it __and__ the user\n    // should be able to append to it. Therefore, we check if there's\n    // an existing value in `style` and append to it if true.\n    for (const propName in properties) {\n        const propValue = properties[propName].contents.toString();\n        // Only map properties with values and that we have not previously mapped\n        if (propValue !== \"\" && !attrToNotAutoMap.has(propName)) {\n            // If a mapping rule exists, apply it; otherwise, map straight across\n            if (propName in attrMapSvg) {\n                const mappedPropName = attrMapSvg[propName];\n                if (!elem.hasAttribute(mappedPropName)) {\n                    elem.setAttribute(mappedPropName, propValue);\n                }\n            }\n            else if (propName === \"style\" && propValue !== \"\") {\n                const style = elem.getAttribute(propName);\n                if (style === null) {\n                    elem.setAttribute(propName, propValue);\n                }\n                else {\n                    elem.setAttribute(propName, `${style}${propValue}`);\n                }\n            }\n            else {\n                if (!elem.hasAttribute(propName)) {\n                    elem.setAttribute(propName, propValue);\n                }\n            }\n        }\n    }\n};\n/**\n * Maps fillColor --> fill, fill-opacity\n */\nexport const attrFill = ({ properties }, elem) => {\n    const color = properties.fillColor;\n    const alpha = toSvgOpacityProperty(color.contents);\n    elem.setAttribute(\"fill\", toSvgPaintProperty(color.contents));\n    // Fill opacity only relevant if fill is present\n    if (color.contents.tag !== \"NONE\") {\n        elem.setAttribute(\"fill-opacity\", alpha.toString());\n    }\n    return [\"fillColor\"]; // Return array of input properties programatically mapped\n};\n/**\n * Maps center --> cx, cy\n */\nexport const attrCenter = ({ properties }, canvasSize, elem) => {\n    const center = properties.center;\n    const [x, y] = toScreen(center.contents, canvasSize);\n    elem.setAttribute(\"cx\", x.toString());\n    elem.setAttribute(\"cy\", y.toString());\n    return [\"center\"]; // Return array of input properties programatically mapped\n};\n/**\n * Maps scale --> transform\n */\nexport const attrScale = ({ properties }, elem) => {\n    let scale = properties.scale.contents;\n    scale = scale || 1;\n    let transform = elem.getAttribute(\"transform\");\n    transform =\n        transform === null ? `scale(${scale})` : transform + `scale{${scale}}`;\n    elem.setAttribute(\"transform\", transform);\n    return [\"scale\"]; // Return array of input properties programatically mapped\n};\n/**\n * Maps center, width, height --> transform\n */\nexport const attrTransformCoords = ({ properties }, canvasSize, elem) => {\n    const center = properties.center;\n    const [x, y] = toScreen(center.contents, canvasSize);\n    const w = properties.width;\n    const h = properties.height;\n    let transform = elem.getAttribute(\"transform\");\n    transform =\n        transform === null\n            ? `translate(${x - w.contents / 2}, ${y - h.contents / 2})`\n            : transform + `translate(${x - w.contents / 2}, ${y - h.contents / 2})`;\n    elem.setAttribute(\"transform\", transform);\n    return [\"center\", \"width\", \"height\"]; // Return array of input properties programatically mapped\n};\n/**\n * Maps center, width, height --> x, y\n */\nexport const attrXY = ({ properties }, canvasSize, elem) => {\n    const center = properties.center;\n    const [x, y] = toScreen(center.contents, canvasSize);\n    const w = properties.width;\n    const h = properties.height;\n    elem.setAttribute(\"x\", (x - w.contents / 2).toString());\n    elem.setAttribute(\"y\", (y - h.contents / 2).toString());\n    return [\"center\", \"width\", \"height\"]; // Return array of input properties programatically mapped\n};\n/**\n * Maps center, width, height, rotation --> transform\n *\n * Rotates a GPI by n degrees about a center\n * Note: elem must be `transform`able\n * NOTE: must be called before transform translate coords (matrix rules)\n * https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform\n */\nexport const attrRotation = ({ properties }, canvasSize, elem) => {\n    const w = properties.width;\n    const h = properties.height;\n    const center = properties.center;\n    const rotation = properties.rotation.contents;\n    const [x, y] = toScreen(center.contents, canvasSize);\n    let transform = elem.getAttribute(\"transform\");\n    transform =\n        transform === null\n            ? `rotate(${rotation}, ${x - w.contents / 2}, ${y - h.contents / 2})`\n            : transform +\n                `rotate(${rotation}, ${x - w.contents / 2}, ${y - h.contents / 2})`;\n    elem.setAttribute(\"transform\", transform);\n    return [\"rotation\", \"center\", \"width\", \"height\"]; // Return array of input properties programatically mapped\n};\n/**\n * Maps width, height --> width, height\n */\nexport const attrWH = ({ properties }, elem) => {\n    const w = properties.width;\n    const h = properties.height;\n    elem.setAttribute(\"width\", w.contents.toString());\n    elem.setAttribute(\"height\", h.contents.toString());\n    return [\"width\", \"height\"]; // Return array of input properties programatically mapped\n};\n/**\n * Maps cornerRadius --> rx\n */\nexport const attrCornerRadius = ({ properties }, elem) => {\n    const rx = properties.cornerRadius;\n    elem.setAttribute(\"rx\", rx.contents.toString());\n    return [\"cornerRadius\"]; // Return array of input properties programatically mapped\n};\n/**\n * Maps data --> d\n */\nexport const attrPathData = ({ properties }, elem) => {\n    const d = properties.data;\n    elem.setAttribute(\"d\", d.contents.toString());\n    return [\"data\"]; // Return array of input properties programatically mapped\n};\n/**\n * Maps string --> new TextNode\n */\nexport const attrString = ({ properties }, elem) => {\n    const str = properties.string;\n    const text = document.createTextNode(str.contents.toString());\n    elem.appendChild(text);\n    return [\"string\"]; // Return array of input properties programatically mapped\n};\nexport const DASH_ARRAY = \"7,5\";\n/**\n * Maps strokeColor --> stroke, stroke-opacity\n *      strokeWidth --> stroke-width\n *      strokeDasharray, strokeStyle --> stroke-dasharray\n *      strokeLinecap --> stroke-linecap\n */\nexport const attrStroke = ({ properties }, elem) => {\n    // Keep a list of which input properties we programatically mapped\n    const attrMapped = [];\n    const strokeColor = properties.strokeColor;\n    const strokeAlpha = toSvgOpacityProperty(strokeColor.contents);\n    const thickness = properties.strokeWidth.contents;\n    elem.setAttribute(\"stroke\", toSvgPaintProperty(strokeColor.contents));\n    attrMapped.push(\"strokeColor\", \"strokeWidth\");\n    // Stroke opacity, width, and dashiness only relevant if stroke is present\n    if (strokeColor.contents.tag !== \"NONE\") {\n        elem.setAttribute(\"stroke-opacity\", strokeAlpha.toString());\n        elem.setAttribute(\"stroke-width\", thickness.toString());\n        if (\"strokeDasharray\" in properties &&\n            properties.strokeDasharray.contents !== \"\") {\n            elem.setAttribute(\"stroke-dasharray\", properties.strokeDasharray.contents);\n        }\n        else if (\"strokeStyle\" in properties &&\n            properties.strokeStyle.contents === \"dashed\") {\n            elem.setAttribute(\"stroke-dasharray\", DASH_ARRAY.toString());\n            attrMapped.push(\"strokeDasharray\", \"strokeStyle\");\n        }\n        if (\"strokeLinecap\" in properties &&\n            properties.strokeLinecap.contents !== \"\") {\n            elem.setAttribute(\"stroke-linecap\", properties.strokeLinecap.contents);\n        }\n        else {\n            elem.setAttribute(\"stroke-linecap\", \"butt\");\n        }\n        attrMapped.push(\"strokeLinecap\");\n    }\n    return attrMapped; // Return array of input properties programatically mapped\n};\n/**\n * Maps name --> new Title\n */\nexport const attrTitle = ({ properties }, elem) => {\n    const name = properties.name;\n    const title = document.createElementNS(\"http://www.w3.org/2000/svg\", \"title\");\n    title.textContent = name.contents;\n    elem.appendChild(title);\n    return [\"name\"]; // Return array of input properties programatically mapped\n};\n/**\n * Maps fontFamily, fontSize, fontStretch, fontStyle, fontVariant, fontWeight, lineHeight -> font\n */\nexport const attrFont = (shape, elem) => {\n    const fontString = toFontRule(shape);\n    const existingStyle = elem.getAttribute(\"style\");\n    // TODO: check if `lineHeight` is valid\n    elem.setAttribute(\"style\", existingStyle\n        ? `${existingStyle}; font: ${fontString};`\n        : `font: ${fontString};`);\n    return [\n        \"fontFamily\",\n        \"fontSize\",\n        \"fontStretch\",\n        \"fontStyle\",\n        \"fontVariant\",\n        \"fontWeight\",\n        \"lineHeigh\",\n    ]; // Return array of input properties programatically mapped\n};\n/**\n * Maps points -> points\n */\nexport const attrPolyPoints = (shape, canvasSize, elem) => {\n    const points = shape.properties.points;\n    const pointsTransformed = points.contents.map((p) => toScreen(p, canvasSize));\n    elem.setAttribute(\"points\", pointsTransformed.toString());\n    return [\"points\"];\n};\n//# sourceMappingURL=AttrHelper.js.map","import { attrAutoFillSvg, attrCenter, attrFill, attrStroke, attrTitle, } from \"./AttrHelper\";\nconst Circle = ({ shape, canvasSize }) => {\n    const elem = document.createElementNS(\"http://www.w3.org/2000/svg\", \"circle\");\n    // Keep track of which input properties we programatically mapped\n    const attrToNotAutoMap = [];\n    // Fill the output SVG attributes while keeping track of input properties mapped\n    attrToNotAutoMap.push(...attrFill(shape, elem));\n    attrToNotAutoMap.push(...attrCenter(shape, canvasSize, elem));\n    attrToNotAutoMap.push(...attrStroke(shape, elem));\n    attrToNotAutoMap.push(...attrTitle(shape, elem));\n    // Directly Map across any \"unknown\" SVG properties\n    attrAutoFillSvg(shape, elem, attrToNotAutoMap);\n    return elem;\n};\nexport default Circle;\n//# sourceMappingURL=Circle.js.map","import { attrAutoFillSvg, attrCenter, attrFill, attrStroke, attrTitle, } from \"./AttrHelper\";\nconst Ellipse = ({ shape, canvasSize }) => {\n    const elem = document.createElementNS(\"http://www.w3.org/2000/svg\", \"ellipse\");\n    // Keep track of which input properties we programatically mapped\n    const attrToNotAutoMap = [];\n    // Map/Fill the shape attributes while keeping track of input properties mapped\n    attrToNotAutoMap.push(...attrFill(shape, elem));\n    attrToNotAutoMap.push(...attrCenter(shape, canvasSize, elem));\n    attrToNotAutoMap.push(...attrStroke(shape, elem));\n    attrToNotAutoMap.push(...attrTitle(shape, elem));\n    // Directly Map across any \"unknown\" SVG properties\n    attrAutoFillSvg(shape, elem, attrToNotAutoMap);\n    return elem;\n};\nexport default Ellipse;\n//# sourceMappingURL=Ellipse.js.map","import { getAdValueAsString } from \"../utils/Util\";\nimport { attrAutoFillSvg, attrFill, attrFont, attrRotation, attrStroke, attrTitle, attrTransformCoords, attrWH, } from \"./AttrHelper\";\nconst Equation = ({ shape, canvasSize, labels }) => {\n    const elem = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n    // Keep track of which input properties we programatically mapped\n    const attrToNotAutoMap = [];\n    // Map/Fill the shape attributes while keeping track of input properties mapped\n    attrToNotAutoMap.push(...attrRotation(shape, canvasSize, elem));\n    attrToNotAutoMap.push(...attrTransformCoords(shape, canvasSize, elem));\n    attrToNotAutoMap.push(...attrTitle(shape, elem));\n    // Indicator: pre-rendered label was found\n    let labelFound = false;\n    const retrievedLabel = labels.get(getAdValueAsString(shape.properties.name));\n    if (retrievedLabel && retrievedLabel.tag === \"EquationData\") {\n        // Clone the retrieved node first to avoid mutating existing labels\n        const renderedLabel = retrievedLabel.rendered.cloneNode(true);\n        const g = renderedLabel.getElementsByTagName(\"g\")[0];\n        attrToNotAutoMap.push(...attrFill(shape, g));\n        // Map Width/Height\n        attrToNotAutoMap.push(...attrWH(shape, renderedLabel));\n        g.setAttribute(\"stroke\", \"none\");\n        g.setAttribute(\"stroke-width\", \"0\");\n        const fontSize = shape.properties.fontSize;\n        renderedLabel.setAttribute(\"style\", `font-size: ${fontSize.contents}`);\n        // Append the element & indicate the rendered label was found\n        elem.appendChild(renderedLabel);\n        labelFound = true;\n    }\n    if (!labelFound) {\n        // Fallback case: generate plain-text (non-rendered) label from string\n        const txt = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n        txt.textContent = getAdValueAsString(shape.properties.string);\n        attrToNotAutoMap.push(\"string\");\n        elem.appendChild(txt);\n        // Map the attributes we have\n        attrToNotAutoMap.push(...attrFill(shape, elem));\n        attrToNotAutoMap.push(...attrWH(shape, elem));\n        attrToNotAutoMap.push(...attrStroke(shape, elem));\n        attrToNotAutoMap.push(...attrFont(shape, elem));\n    }\n    // Directly Map across any \"unknown\" SVG properties\n    attrAutoFillSvg(shape, elem, attrToNotAutoMap);\n    return elem;\n};\nexport default Equation;\n//# sourceMappingURL=Equation.js.map","export const image = `<?xml version='1.0' encoding='UTF-8' standalone='no'?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n<!-- https://commons.wikimedia.org/wiki/File:Tox_hallucin.svg -->\n<svg\n   xmlns:dc='http://purl.org/dc/elements/1.1/'\n   xmlns:cc='http://creativecommons.org/ns#'\n   xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'\n   xmlns:svg='http://www.w3.org/2000/svg'\n   xmlns='http://www.w3.org/2000/svg'\n   xmlns:xlink='http://www.w3.org/1999/xlink'\n   xmlns:sodipodi='http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd'\n   xmlns:inkscape='http://www.inkscape.org/namespaces/inkscape'\n   width='100%'\n   height='100%'\n   id='svg2'\n   sodipodi:version='0.32'\n preserveAspectRatio='none'  inkscape:version='0.46'\n viewBox='0 0 300 300'  version='1.0'\n   sodipodi:docname='tox hallucin.svg'\n   inkscape:output_extension='org.inkscape.output.svg.inkscape'>\n  <defs\n     id='defs4'>\n    <linearGradient\n       inkscape:collect='always'\n       id='linearGradient3191'>\n      <stop\n         style='stop-color:#ff8d00;stop-opacity:1;'\n         offset='0'\n         id='stop3193' />\n      <stop\n         style='stop-color:#ff8d00;stop-opacity:0;'\n         offset='1'\n         id='stop3195' />\n    </linearGradient>\n    <linearGradient\n       id='linearGradient3175'>\n      <stop\n         style='stop-color:#00ccff;stop-opacity:1;'\n         offset='0'\n         id='stop3177' />\n      <stop\n         style='stop-color:#ff1300;stop-opacity:0;'\n         offset='1'\n         id='stop3179' />\n    </linearGradient>\n    <linearGradient\n       id='linearGradient3155'>\n      <stop\n         style='stop-color:#ffffff;stop-opacity:1;'\n         offset='0'\n         id='stop3157' />\n      <stop\n         style='stop-color:#efff00;stop-opacity:1;'\n         offset='1'\n         id='stop3159' />\n    </linearGradient>\n    <inkscape:perspective\n       sodipodi:type='inkscape:persp3d'\n       inkscape:vp_x='0 : 526.18109 : 1'\n       inkscape:vp_y='0 : 1000 : 0'\n       inkscape:vp_z='744.09448 : 526.18109 : 1'\n       inkscape:persp3d-origin='372.04724 : 350.78739 : 1'\n       id='perspective10' />\n    <radialGradient\n       inkscape:collect='always'\n       xlink:href='#linearGradient3155'\n       id='radialGradient3161'\n       cx='88.527176'\n       cy='113.77536'\n       fx='88.527176'\n       fy='113.77536'\n       r='138.2794'\n       gradientUnits='userSpaceOnUse'\n       gradientTransform='matrix(0.999944,-1.9657533,1.153884,0.5869605,-136.45929,210.24015)' />\n    <radialGradient\n       inkscape:collect='always'\n       xlink:href='#linearGradient3155'\n       id='radialGradient3227'\n       gradientUnits='userSpaceOnUse'\n       gradientTransform='matrix(0.999944,-1.9657533,1.153884,0.5869605,-136.45929,210.24015)'\n       cx='88.527176'\n       cy='113.77536'\n       fx='88.527176'\n       fy='113.77536'\n       r='138.2794' />\n    <radialGradient\n       inkscape:collect='always'\n       xlink:href='#linearGradient3191'\n       id='radialGradient3197'\n       cx='70.968475'\n       cy='160.37096'\n       fx='70.968475'\n       fy='160.37096'\n       r='21.348242'\n       gradientTransform='matrix(1,0,0,0.9729729,0,4.3343583)'\n       gradientUnits='userSpaceOnUse' />\n  </defs>\n  <sodipodi:namedview\n     id='base'\n     pagecolor='#ffffff'\n     bordercolor='#666666'\n     borderopacity='1.0'\n     gridtolerance='10000'\n     guidetolerance='10'\n     objecttolerance='10'\n     inkscape:pageopacity='0.0'\n     inkscape:pageshadow='2'\n     inkscape:zoom='1.624463'\n     inkscape:cx='101.39954'\n     inkscape:cy='85.047263'\n     inkscape:document-units='px'\n     inkscape:current-layer='layer1'\n     showgrid='false'\n     inkscape:window-width='1073'\n     inkscape:window-height='720'\n     inkscape:window-x='9'\n     inkscape:window-y='37' />\n  <metadata\n     id='metadata7'>\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=''>\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource='http://purl.org/dc/dcmitype/StillImage' />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label='Layer 1'\n     inkscape:groupmode='layer'\n     id='layer1'>\n    <path\n       sodipodi:type='arc'\n       style='opacity:1;fill:#efff00;fill-opacity:1.0;stroke:#000000;stroke-width:10;stroke-linejoin:bevel;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1'\n       id='path2383'\n       sodipodi:cx='149.64484'\n       sodipodi:cy='150.35516'\n       sodipodi:rx='138.2794'\n       sodipodi:ry='138.2794'\n       d='M 287.92424,150.35516 A 138.2794,138.2794 0 1 1 11.365433,150.35516 A 138.2794,138.2794 0 1 1 287.92424,150.35516 z' />\n    <path\n       sodipodi:type='arc'\n       style='opacity:1;fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linejoin:bevel;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1'\n       id='path3161'\n       sodipodi:cx='103.94469'\n       sodipodi:cy='104.13142'\n       sodipodi:rx='24.748737'\n       sodipodi:ry='37.476658'\n       d='M 128.69342,104.13142 A 24.748737,37.476658 0 1 1 79.19595,104.13142 A 24.748737,37.476658 0 1 1 128.69342,104.13142 z'\n       transform='matrix(-0.9582289,-0.2860021,-0.2860021,0.9582289,325.97792,44.974994)' />\n    <path\n       sodipodi:type='arc'\n       style='opacity:1;fill:#000000;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linejoin:bevel;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1'\n       id='path3167'\n       sodipodi:cx='106.5'\n       sodipodi:cy='114'\n       sodipodi:rx='9.5'\n       sodipodi:ry='10'\n       d='M 116,114 A 9.5,10 0 1 1 97,114 A 9.5,10 0 1 1 116,114 z'\n       transform='matrix(1.6054105,0,0,1.4584426,27.357721,-51.363012)' />\n    <path\n       sodipodi:type='arc'\n       style='opacity:1;fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linejoin:bevel;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1'\n       id='path3168'\n       sodipodi:cx='103.94469'\n       sodipodi:cy='104.13142'\n       sodipodi:rx='24.748737'\n       sodipodi:ry='37.476658'\n       d='M 128.69342,104.13142 A 24.748737,37.476658 0 1 1 79.19595,104.13142 A 24.748737,37.476658 0 1 1 128.69342,104.13142 z'\n       transform='matrix(-0.9532299,0.302246,0.302246,0.9532299,175.23598,-14.157525)' />\n    <path\n       sodipodi:type='arc'\n       style='opacity:1;fill:#000000;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linejoin:bevel;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1'\n       id='path3170'\n       sodipodi:cx='106.5'\n       sodipodi:cy='114'\n       sodipodi:rx='9.5'\n       sodipodi:ry='10'\n       d='M 116,114 A 9.5,10 0 1 1 97,114 A 9.5,10 0 1 1 116,114 z'\n       transform='matrix(1.5359163,0,0,1.6024784,-55.141915,-65.123921)' />\n    <path\n       sodipodi:type='arc'\n       style='opacity:1;fill:#00e3ff;fill-opacity:0.47924528999999999;stroke:#000000;stroke-width:4.92309473;stroke-linejoin:bevel;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1'\n       id='path3195'\n       sodipodi:cx='45.27861'\n       sodipodi:cy='56.802517'\n       sodipodi:rx='21.939119'\n       sodipodi:ry='22.8727'\n       d='M 67.21773,56.802517 A 21.939119,22.8727 0 1 1 23.339491,56.802517 A 21.939119,22.8727 0 1 1 67.21773,56.802517 z'\n       transform='matrix(0.8086003,0,0,0.8164126,0.2640954,-11.044101)' />\n    <path\n       sodipodi:type='arc'\n       style='opacity:1;fill:#00e3ff;fill-opacity:0.47924529;stroke:#000000;stroke-width:4.92309475;stroke-linejoin:bevel;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1'\n       id='path3197'\n       sodipodi:cx='45.27861'\n       sodipodi:cy='56.802517'\n       sodipodi:rx='21.939119'\n       sodipodi:ry='22.8727'\n       d='M 67.21773,56.802517 A 21.939119,22.8727 0 1 1 23.339491,56.802517 A 21.939119,22.8727 0 1 1 67.21773,56.802517 z'\n       transform='matrix(0.8086003,0,0,0.8164126,152.64503,26.616757)' />\n    <path\n       sodipodi:type='arc'\n       style='opacity:1;fill:#00e3ff;fill-opacity:0.47924528999999999;stroke:#000000;stroke-width:4.92309473;stroke-linejoin:bevel;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1'\n       id='path3199'\n       sodipodi:cx='45.27861'\n       sodipodi:cy='56.802517'\n       sodipodi:rx='21.939119'\n       sodipodi:ry='22.8727'\n       d='M 67.21773,56.802517 A 21.939119,22.8727 0 1 1 23.339491,56.802517 A 21.939119,22.8727 0 1 1 67.21773,56.802517 z'\n       transform='matrix(0.8086003,0,0,0.8164126,208.91913,1.5592222)' />\n    <path\n       sodipodi:type='arc'\n       style='opacity:1;fill:#00e3ff;fill-opacity:0.47924529;stroke:#000000;stroke-width:7.66160011;stroke-linejoin:bevel;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1'\n       id='path3201'\n       sodipodi:cx='45.27861'\n       sodipodi:cy='56.802517'\n       sodipodi:rx='21.939119'\n       sodipodi:ry='22.8727'\n       d='M 67.21773,56.802517 A 21.939119,22.8727 0 1 1 23.339491,56.802517 A 21.939119,22.8727 0 1 1 67.21773,56.802517 z'\n       transform='matrix(0.5225444,0,0,0.5216243,107.50785,6.167405)' />\n    <path\n       sodipodi:type='arc'\n       style='opacity:1;fill:#00e3ff;fill-opacity:0.47924529;stroke:#000000;stroke-width:7.66160011;stroke-linejoin:bevel;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1'\n       id='path3203'\n       sodipodi:cx='45.27861'\n       sodipodi:cy='56.802517'\n       sodipodi:rx='21.939119'\n       sodipodi:ry='22.8727'\n       d='M 67.21773,56.802517 A 21.939119,22.8727 0 1 1 23.339491,56.802517 A 21.939119,22.8727 0 1 1 67.21773,56.802517 z'\n       transform='matrix(0.5225444,0,0,0.5216243,18.350997,91.123147)' />\n    <path\n       sodipodi:type='arc'\n       style='opacity:1;fill:#00e3ff;fill-opacity:0.47924529;stroke:#000000;stroke-width:7.66160011;stroke-linejoin:bevel;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1'\n       id='path3205'\n       sodipodi:cx='45.27861'\n       sodipodi:cy='56.802517'\n       sodipodi:rx='21.939119'\n       sodipodi:ry='22.8727'\n       d='M 67.21773,56.802517 A 21.939119,22.8727 0 1 1 23.339491,56.802517 A 21.939119,22.8727 0 1 1 67.21773,56.802517 z'\n       transform='matrix(0.5225444,0,0,0.5216243,241.47652,68.717237)' />\n    <path\n       sodipodi:type='arc'\n       style='opacity:1;fill:#00e3ff;fill-opacity:0.47924529;stroke:#000000;stroke-width:7.66160011;stroke-linejoin:bevel;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1'\n       id='path3207'\n       sodipodi:cx='45.27861'\n       sodipodi:cy='56.802517'\n       sodipodi:rx='21.939119'\n       sodipodi:ry='22.8727'\n       d='M 67.21773,56.802517 A 21.939119,22.8727 0 1 1 23.339491,56.802517 A 21.939119,22.8727 0 1 1 67.21773,56.802517 z'\n       transform='matrix(0.5225444,0,0,0.5216243,190.12964,149.00508)' />\n    <path\n       id='path3209'\n       style='fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:2.7166822;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1'\n       d='M 61.524095,141.5056 L 61.524095,150.8265 M 61.557643,163.12376 L 61.557643,172.44466 M 75.425271,156.87515 L 66.971345,156.87515 M 56.778194,157.01501 L 48.324268,157.01501 M 71.584095,145.37378 L 65.167078,152.13403 M 56.725303,161.07608 L 50.308286,167.83633 M 71.085092,166.09132 L 64.953634,160.27118 M 57.464465,153.35509 L 51.333007,147.53495' />\n    <path\n       id='path3221'\n       style='fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:2.7166822;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1'\n       d='M 86.725071,37.423625 L 86.725071,46.744525 M 86.758619,59.041785 L 86.758619,68.362685 M 100.62625,52.793175 L 92.172321,52.793175 M 81.97917,52.933035 L 73.525244,52.933035 M 96.785071,41.291805 L 90.368054,48.052055 M 81.926279,56.994105 L 75.509262,63.754355 M 96.286068,62.009345 L 90.15461,56.189205 M 82.665441,49.273115 L 76.533983,43.452975' />\n    <path\n       id='path3223'\n       style='fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:2.7166822;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1'\n       d='M 253.0319,128.4217 L 253.0319,137.7426 M 253.06544,150.03986 L 253.06544,159.36076 M 266.93307,143.79125 L 258.47915,143.79125 M 248.286,143.93111 L 239.83207,143.93111 M 263.0919,132.28988 L 256.67488,139.05013 M 248.2331,147.99218 L 241.81609,154.75243 M 262.59289,153.00742 L 256.46144,147.18728 M 248.97227,140.27119 L 242.84081,134.45105' />\n    <path\n       id='path3225'\n       style='fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:2.7166822;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1'\n       d='M 279.70375,5.2605113 L 279.70375,14.581411 M 279.73729,26.878671 L 279.73729,36.199571 M 293.60492,20.630061 L 285.151,20.630061 M 274.95784,20.769921 L 266.50392,20.769921 M 289.76375,9.1286912 L 283.34673,15.888941 M 274.90495,24.830991 L 268.48794,31.591241 M 289.26474,29.846231 L 283.13328,24.026091 M 275.64412,17.110001 L 269.51266,11.289861'\n       inkscape:transform-center-x='-6.2757294'\n       inkscape:transform-center-y='-7.0601956' />\n    <path\n       style='fill:#ffffff;fill-opacity:0.47924529;fill-rule:evenodd;stroke:#000000;stroke-width:1.2715199px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1'\n       d='M 99.300775,203.95684 L 55.102321,211.07101 C 63.275993,251.4092 43.33167,297.03463 67.500148,296.25246 C 91.668625,295.4703 75.132299,239.93649 75.132299,227.42183 C 75.132299,214.90716 96.756726,203.17467 99.300775,203.95684 z'\n       id='path3227'\n       sodipodi:nodetypes='ccssc' />\n    <path\n       style='fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:10;stroke-linecap:butt;stroke-linejoin:bevel;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1'\n       d='M 46.678979,210.37636 C 46.678979,210.37636 61.688317,182.90612 101.76017,180.50181 C 148.43916,177.70107 158.61785,218.03349 198.85245,218.77857 C 250.19932,219.71215 256.73439,187.03686 256.73439,187.03686 L 257.66797,186.10329 C 255.4936,218.71891 214.56016,233.58514 186.79701,232.12826 C 154.98692,230.45901 145.34234,210.03157 116.69745,202.90772 C 90.073723,196.28652 46.678979,210.37636 46.678979,210.37636 z'\n       id='path3193'\n       sodipodi:nodetypes='cssccssc' />\n  </g>\n</svg>`;\n//# sourceMappingURL=not_found.js.map","import { attrAutoFillSvg, attrRotation, attrTransformCoords, attrWH, } from \"./AttrHelper\";\nimport * as notFound from \"./not_found\";\nconst Image = async ({ shape, canvasSize, pathResolver, }) => {\n    const elem = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n    // Keep track of which input properties we programatically mapped\n    const attrToNotAutoMap = [];\n    // Map/Fill the shape attributes while keeping track of input properties mapped\n    const path = shape.properties.href.contents;\n    let rawSVG = await pathResolver(path);\n    if (rawSVG === undefined) {\n        console.error(`Could not resolve image path ${path}`);\n        rawSVG = notFound.image;\n    }\n    attrToNotAutoMap.push(\"href\");\n    elem.innerHTML = rawSVG;\n    // We assume the first svg element in the file is the one to display\n    const svg = elem.querySelector(\"svg\");\n    const defs = svg.getElementsByTagName(\"defs\");\n    /**\n     * HACK:\n     * We generate Unique IDs because of potential collisions when multiple images\n     * are integrated in one diagram.\n     */\n    if (defs.length > 0) {\n        defs[0].querySelectorAll(\"*\").forEach((node) => {\n            if (node.id !== \"\") {\n                // BUG: not matching on fill=\"url(#...)\", only hrefs\n                const users = svg.querySelectorAll(`[*|href=\"#${node.id}\"]:not([href])`);\n                users.forEach((user) => {\n                    const unique = `${shape.properties.name.contents}-ns-${node.id}`;\n                    user.setAttributeNS(\"http://www.w3.org/1999/xlink\", \"href\", \"#\" + unique);\n                    node.setAttribute(\"id\", unique);\n                });\n            }\n        });\n    }\n    attrToNotAutoMap.push(...attrWH(shape, svg));\n    attrToNotAutoMap.push(...attrRotation(shape, canvasSize, elem));\n    attrToNotAutoMap.push(...attrTransformCoords(shape, canvasSize, elem));\n    // Directly Map across any \"unknown\" SVG properties\n    attrAutoFillSvg(shape, elem, attrToNotAutoMap);\n    return elem;\n};\nexport default Image;\n//# sourceMappingURL=Image.js.map","import { getArrowhead, round2, toScreen, toSvgOpacityProperty, toSvgPaintProperty, } from \"../utils/Util\";\nimport { attrAutoFillSvg, attrTitle, DASH_ARRAY } from \"./AttrHelper\";\nexport const arrowHead = (id, color, opacity, arrow, size, flip) => {\n    const marker = document.createElementNS(\"http://www.w3.org/2000/svg\", \"marker\");\n    marker.setAttribute(\"id\", id);\n    marker.setAttribute(\"markerUnits\", \"strokeWidth\");\n    marker.setAttribute(\"markerWidth\", round2(arrow.width * size).toString());\n    marker.setAttribute(\"markerHeight\", round2(arrow.height * size).toString());\n    marker.setAttribute(\"viewBox\", arrow.viewbox);\n    marker.setAttribute(\"refX\", arrow.refX.toString());\n    marker.setAttribute(\"refY\", arrow.refY.toString());\n    if (flip) {\n        marker.setAttribute(\"orient\", \"auto\");\n    }\n    else {\n        marker.setAttribute(\"orient\", \"auto-start-reverse\");\n    }\n    const path = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n    path.setAttribute(\"d\", arrow.path);\n    if (arrow.fillKind === \"stroke\") {\n        path.setAttribute(\"fill\", \"none\");\n        marker.setAttribute(\"stroke\", color);\n        marker.setAttribute(\"stroke-opacity\", opacity.toString());\n    } /* if (arrow.fillKind === \"fill\") */\n    else {\n        path.setAttribute(\"fill\", color);\n        path.setAttribute(\"fill-opacity\", opacity.toString());\n    }\n    if (arrow.style) {\n        Object.entries(arrow.style).forEach(([key, value]) => {\n            path.setAttribute(key, value);\n        });\n    }\n    marker.appendChild(path);\n    return marker;\n};\nconst makeRoomForArrows = (shape, startArrowhead, endArrowhead) => {\n    // Keep a list of which input properties we programatically mapped\n    const attrMapped = [];\n    const [lineSX, lineSY] = shape.properties.start\n        .contents;\n    const [lineEX, lineEY] = shape.properties.end\n        .contents;\n    const startArrowheadSize = shape.properties\n        .startArrowheadSize.contents;\n    const endArrowheadSize = shape.properties.endArrowheadSize\n        .contents;\n    const thickness = shape.properties.strokeWidth.contents;\n    attrMapped.push(\"start\", \"end\", \"startArrowhead\", \"endArrowhead\", \"startArrowheadSize\", \"endArrowheadSize\", \"strokeWidth\");\n    // height * size = Penrose computed arrow size\n    // multiplied by thickness since the arrow size uses markerUnits, which is strokeWidth by default:\n    // https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/markerUnits\n    const length = Math.sqrt((lineSX - lineEX) ** 2 + (lineSY - lineEY) ** 2);\n    // Subtract off the arrowHeight from each side.\n    // See https://math.stackexchange.com/a/2045181 for a derivation.\n    let arrowSX, arrowSY;\n    if (startArrowhead) {\n        const startFlip = shape.properties.flipStartArrowhead.contents;\n        const startArrowWidth = (startFlip\n            ? startArrowhead.refX\n            : startArrowhead.width - startArrowhead.refX) *\n            startArrowheadSize *\n            thickness;\n        const dx = (startArrowWidth / length) * (lineSX - lineEX);\n        const dy = (startArrowWidth / length) * (lineSY - lineEY);\n        [arrowSX, arrowSY] = [lineSX - dx, lineSY - dy];\n    }\n    else {\n        [arrowSX, arrowSY] = [lineSX, lineSY];\n    }\n    let arrowEX, arrowEY;\n    if (endArrowhead) {\n        const endArrowWidth = (endArrowhead.width - endArrowhead.refX) * endArrowheadSize * thickness;\n        [arrowEX, arrowEY] = [\n            lineEX - (endArrowWidth / length) * (lineEX - lineSX),\n            lineEY - (endArrowWidth / length) * (lineEY - lineSY),\n        ];\n    }\n    else {\n        [arrowEX, arrowEY] = [lineEX, lineEY];\n    }\n    return [\n        [\n            [arrowSX, arrowSY],\n            [arrowEX, arrowEY],\n        ],\n        attrMapped,\n    ];\n};\nconst Line = ({ shape, canvasSize }) => {\n    const startArrowhead = getArrowhead(shape.properties.startArrowhead.contents);\n    const endArrowhead = getArrowhead(shape.properties.endArrowhead.contents);\n    const [[[arrowSX, arrowSY], [arrowEX, arrowEY]], attrToNotAutoMap,] = makeRoomForArrows(shape, startArrowhead, endArrowhead);\n    const [sx, sy] = toScreen([arrowSX, arrowSY], canvasSize);\n    const [ex, ey] = toScreen([arrowEX, arrowEY], canvasSize);\n    const path = `M ${sx} ${sy} L ${ex} ${ey}`;\n    const color = toSvgPaintProperty(shape.properties.strokeColor.contents);\n    const thickness = shape.properties.strokeWidth.contents;\n    const opacity = toSvgOpacityProperty(shape.properties.strokeColor.contents);\n    const elem = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n    const startArrowId = shape.properties.name.contents + \"-startArrowId\";\n    const endArrowId = shape.properties.name.contents + \"-endArrowId\";\n    if (startArrowhead) {\n        const startArrowheadSize = shape.properties\n            .startArrowheadSize.contents;\n        const flip = shape.properties.flipStartArrowhead.contents;\n        elem.appendChild(arrowHead(startArrowId, color, opacity, startArrowhead, startArrowheadSize, flip));\n    }\n    if (endArrowhead) {\n        const endArrowheadSize = shape.properties\n            .endArrowheadSize.contents;\n        elem.appendChild(arrowHead(endArrowId, color, opacity, endArrowhead, endArrowheadSize, false));\n    }\n    // Map/Fill the shape attributes while keeping track of input properties mapped\n    attrToNotAutoMap.push(\"strokeColor\", \"strokeWidth\", \"startArrowhead\", \"flipStartArrowhead\", \"endArrowhead\", \"startArrowheadSize\", \"endArrowheadSize\");\n    const pathElem = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n    pathElem.setAttribute(\"d\", path);\n    // Opacity and width only relevant if stroke is present\n    if (shape.properties.strokeColor.contents.tag !== \"NONE\") {\n        pathElem.setAttribute(\"stroke-opacity\", opacity.toString());\n        pathElem.setAttribute(\"stroke-width\", thickness.toString());\n    }\n    pathElem.setAttribute(\"stroke\", color);\n    // factor out an AttrHelper\n    if (\"strokeDasharray\" in shape.properties &&\n        shape.properties.strokeDasharray.contents !== \"\") {\n        pathElem.setAttribute(\"stroke-dasharray\", shape.properties.strokeDasharray.contents);\n    }\n    else if (shape.properties.strokeStyle.contents === \"dashed\") {\n        pathElem.setAttribute(\"stroke-dasharray\", DASH_ARRAY.toString());\n    }\n    attrToNotAutoMap.push(\"strokeDasharray\", \"strokeStyle\");\n    if (\"strokeLinecap\" in shape.properties &&\n        shape.properties.strokeLinecap.contents !== \"\") {\n        pathElem.setAttribute(\"stroke-linecap\", shape.properties.strokeLinecap.contents);\n    }\n    else {\n        pathElem.setAttribute(\"stroke-linecap\", \"butt\"); // same default as SVG\n    }\n    attrToNotAutoMap.push(\"strokeLinecap\");\n    // TODO: dedup in AttrHelper\n    if (startArrowhead) {\n        pathElem.setAttribute(\"marker-start\", `url(#${startArrowId})`);\n        attrToNotAutoMap.push(\"startArrowhead\");\n    }\n    if (endArrowhead) {\n        pathElem.setAttribute(\"marker-end\", `url(#${endArrowId})`);\n        attrToNotAutoMap.push(\"endArrowhead\");\n    }\n    elem.appendChild(pathElem);\n    attrToNotAutoMap.push(...attrTitle(shape, elem));\n    // Directly Map across any \"unknown\" SVG properties\n    attrAutoFillSvg(shape, elem, attrToNotAutoMap);\n    return elem;\n};\nexport default Line;\n//# sourceMappingURL=Line.js.map","import _ from \"lodash\";\nimport { getArrowhead, toScreen, toSvgOpacityProperty, toSvgPaintProperty, } from \"../utils/Util\";\nimport { attrAutoFillSvg, attrTitle, DASH_ARRAY } from \"./AttrHelper\";\nimport { arrowHead } from \"./Line\";\nconst toPathString = (pathData, canvasSize) => pathData\n    .map((pathCmd) => {\n    const { cmd, contents } = pathCmd;\n    if (contents.length === 0 && cmd !== \"Z\") {\n        console.error(\"WARNING: empty path\");\n        return \"\";\n    }\n    const pathStr = _.flatten(\n    // the `number[]` type annotation is necessary to ensure that a compile\n    // error occurs here if more `SubPath` subtypes are added in the future\n    contents.map((c) => {\n        switch (c.tag) {\n            case \"CoordV\": {\n                return toScreen(c.contents, canvasSize);\n            }\n            case \"ValueV\": {\n                return c.contents;\n            }\n        }\n    })).join(\" \");\n    return `${cmd} ${pathStr}`;\n})\n    .join(\" \");\nconst Shadow = (id) => {\n    const elem = document.createElementNS(\"http://www.w3.org/2000/svg\", \"filter\");\n    elem.setAttribute(\"id\", id);\n    elem.setAttribute(\"x\", \"0\");\n    elem.setAttribute(\"y\", \"0\");\n    elem.setAttribute(\"width\", \"200%\");\n    elem.setAttribute(\"height\", \"200%\");\n    elem.innerHTML = `\n    <feOffset result=\"offOut\" in=\"SourceAlpha\" dx=\"5\" dy=\"5\" />\n       <feGaussianBlur result=\"blurOut\" in=\"offOut\" stdDeviation=\"4\" />\n       <feBlend in=\"SourceGraphic\" in2=\"blurOut\" mode=\"normal\" />\n       <feComponentTransfer>\n         <feFuncA type=\"linear\" slope=\"0.5\" />\n       </feComponentTransfer>\n       <feMerge>\n         <feMergeNode />\n         <feMergeNode in=\"SourceGraphic\" />\n       </feMerge>\n    `;\n    return elem;\n};\nexport const Path = ({ shape, canvasSize }) => {\n    // TODO: distinguish between fill opacity and stroke opacity\n    const startArrowId = shape.properties.name.contents + \"-startArrowId\";\n    const endArrowId = shape.properties.name.contents + \"-endArrowId\";\n    const shadowId = shape.properties.name.contents + \"-shadow\";\n    const elem = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n    const strokeWidth = shape.properties.strokeWidth.contents;\n    const strokeColor = toSvgPaintProperty(shape.properties.strokeColor.contents);\n    const strokeOpacity = toSvgOpacityProperty(shape.properties.strokeColor.contents);\n    const fillColor = toSvgPaintProperty(shape.properties.fillColor.contents);\n    const fillOpacity = toSvgOpacityProperty(shape.properties.fillColor.contents);\n    // Keep track of which input properties we programatically mapped\n    const attrToNotAutoMap = [];\n    const startArrowhead = getArrowhead(shape.properties.startArrowhead.contents);\n    const endArrowhead = getArrowhead(shape.properties.endArrowhead.contents);\n    if (startArrowhead) {\n        const startArrowId = shape.properties.name.contents + \"-startArrowId\";\n        const startArrowheadSize = shape.properties\n            .startArrowheadSize.contents;\n        const flip = shape.properties.flipStartArrowhead.contents;\n        elem.appendChild(arrowHead(startArrowId, strokeColor, strokeOpacity, startArrowhead, startArrowheadSize, flip));\n    }\n    if (endArrowhead) {\n        const endArrowId = shape.properties.name.contents + \"-endArrowId\";\n        const endArrowheadSize = shape.properties\n            .endArrowheadSize.contents;\n        elem.appendChild(arrowHead(endArrowId, strokeColor, strokeOpacity, endArrowhead, endArrowheadSize, false));\n    }\n    // Map/Fill the shape attributes while keeping track of input properties mapped\n    attrToNotAutoMap.push(\"name\", \"strokeColor\", \"startArrowhead\", \"flipStartArrowhead\", \"endArrowhead\");\n    elem.appendChild(Shadow(shadowId));\n    const path = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n    path.setAttribute(\"stroke\", strokeColor);\n    path.setAttribute(\"fill\", fillColor);\n    attrToNotAutoMap.push(\"fillColor\", \"strokeColor\");\n    // Stroke opacity and width only relevant if paint is present\n    if (shape.properties.strokeColor.contents.tag !== \"NONE\") {\n        path.setAttribute(\"stroke-width\", strokeWidth.toString());\n        path.setAttribute(\"stroke-opacity\", strokeOpacity.toString());\n        attrToNotAutoMap.push(\"strokeColor\", \"strokeWidth\");\n    }\n    // Fill opacity only relevant if paint is present\n    if (shape.properties.fillColor.contents.tag !== \"NONE\") {\n        path.setAttribute(\"fill-opacity\", fillOpacity.toString());\n        attrToNotAutoMap.push(\"fillColor\");\n    }\n    // factor out an AttrHelper\n    if (\"strokeDasharray\" in shape.properties &&\n        shape.properties.strokeDasharray.contents !== \"\") {\n        path.setAttribute(\"stroke-dasharray\", shape.properties.strokeDasharray.contents);\n    }\n    else if (shape.properties.strokeStyle.contents === \"dashed\") {\n        path.setAttribute(\"stroke-dasharray\", DASH_ARRAY.toString());\n    }\n    attrToNotAutoMap.push(\"strokeDasharray\", \"strokeStyle\");\n    // TODO: ded\n    path.setAttribute(\"d\", toPathString(shape.properties.d.contents, canvasSize));\n    attrToNotAutoMap.push(\"d\");\n    if (startArrowhead) {\n        path.setAttribute(\"marker-start\", `url(#${startArrowId})`);\n        attrToNotAutoMap.push(\"startArrowhead\");\n    }\n    if (endArrowhead) {\n        path.setAttribute(\"marker-end\", `url(#${endArrowId})`);\n        attrToNotAutoMap.push(\"endArrowhead\");\n    }\n    elem.appendChild(path);\n    attrToNotAutoMap.push(...attrTitle(shape, elem));\n    // Directly Map across any \"unknown\" SVG properties\n    attrAutoFillSvg(shape, elem, attrToNotAutoMap);\n    return elem;\n};\nexport default Path;\n//# sourceMappingURL=Path.js.map","import { attrAutoFillSvg, attrFill, attrPolyPoints, attrScale, attrStroke, attrTitle, } from \"./AttrHelper\";\nconst Polygon = ({ shape, canvasSize }) => {\n    const elem = document.createElementNS(\"http://www.w3.org/2000/svg\", \"polygon\");\n    // Keep track of which input properties we programatically mapped\n    const attrToNotAutoMap = [];\n    // Map/Fill the shape attributes while keeping track of input properties mapped\n    attrToNotAutoMap.push(...attrFill(shape, elem));\n    attrToNotAutoMap.push(...attrStroke(shape, elem));\n    attrToNotAutoMap.push(...attrTitle(shape, elem));\n    attrToNotAutoMap.push(...attrScale(shape, elem));\n    attrToNotAutoMap.push(...attrPolyPoints(shape, canvasSize, elem));\n    // Directly Map across any \"unknown\" SVG properties\n    attrAutoFillSvg(shape, elem, attrToNotAutoMap);\n    return elem;\n};\nexport default Polygon;\n//# sourceMappingURL=Polygon.js.map","import { attrAutoFillSvg, attrFill, attrPolyPoints, attrScale, attrStroke, attrTitle, } from \"./AttrHelper\";\nconst Polyline = ({ shape, canvasSize }) => {\n    const elem = document.createElementNS(\"http://www.w3.org/2000/svg\", \"polyline\");\n    // Keep track of which input properties we programatically mapped\n    const attrToNotAutoMap = [];\n    // Map/Fill the shape attributes while keeping track of input properties mapped\n    attrToNotAutoMap.push(...attrFill(shape, elem));\n    attrToNotAutoMap.push(...attrStroke(shape, elem));\n    attrToNotAutoMap.push(...attrTitle(shape, elem));\n    attrToNotAutoMap.push(...attrScale(shape, elem));\n    attrToNotAutoMap.push(...attrPolyPoints(shape, canvasSize, elem));\n    // Directly Map across any \"unknown\" SVG properties\n    attrAutoFillSvg(shape, elem, attrToNotAutoMap);\n    return elem;\n};\nexport default Polyline;\n//# sourceMappingURL=Polyline.js.map","import { attrAutoFillSvg, attrCornerRadius, attrFill, attrRotation, attrStroke, attrTitle, attrWH, attrXY, } from \"./AttrHelper\";\nconst Rectangle = ({ shape, canvasSize }) => {\n    const elem = document.createElementNS(\"http://www.w3.org/2000/svg\", \"rect\");\n    // Keep track of which input properties we programatically mapped\n    const attrToNotAutoMap = [];\n    // Map/Fill the shape attributes while keeping track of input properties mapped\n    attrToNotAutoMap.push(...attrXY(shape, canvasSize, elem));\n    attrToNotAutoMap.push(...attrWH(shape, elem));\n    attrToNotAutoMap.push(...attrFill(shape, elem));\n    attrToNotAutoMap.push(...attrStroke(shape, elem));\n    attrToNotAutoMap.push(...attrTitle(shape, elem));\n    attrToNotAutoMap.push(...attrCornerRadius(shape, elem));\n    attrToNotAutoMap.push(...attrRotation(shape, canvasSize, elem));\n    // Directly Map across any \"unknown\" SVG properties\n    attrAutoFillSvg(shape, elem, attrToNotAutoMap);\n    return elem;\n};\nexport default Rectangle;\n//# sourceMappingURL=Rectangle.js.map","import { toScreen } from \"../utils/Util\";\nimport { attrAutoFillSvg, attrFill, attrFont, attrRotation, attrString, attrStroke, attrTitle, attrWH, } from \"./AttrHelper\";\nconst Text = ({ shape, canvasSize, labels }) => {\n    const elem = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n    // Keep track of which input properties we programatically mapped\n    const attrToNotAutoMap = [];\n    // Map/Fill the shape attributes while keeping track of input properties mapped\n    attrToNotAutoMap.push(\"x\", \"y\");\n    attrToNotAutoMap.push(...attrFill(shape, elem));\n    attrToNotAutoMap.push(...attrStroke(shape, elem));\n    attrToNotAutoMap.push(...attrTitle(shape, elem));\n    attrToNotAutoMap.push(...attrString(shape, elem));\n    attrToNotAutoMap.push(...attrRotation(shape, canvasSize, elem));\n    attrToNotAutoMap.push(...attrFont(shape, elem));\n    // Get width/height of the text if available\n    const name = shape.properties.name;\n    const retrievedLabel = labels.get(name.contents);\n    // Directly render the text with [x, y] in screen coordinates without transforming them using `width` and `height`\n    const center = shape.properties.center;\n    const [x, y] = toScreen(center.contents, canvasSize);\n    if (retrievedLabel && retrievedLabel.tag === \"TextData\") {\n        // adjust the y-coordinate of the text center s.t. it's the center of the bbox\n        // see https://user-images.githubusercontent.com/11740102/149545843-84406be2-b3dc-4294-b01f-26ef8a2098ee.png for an illustration\n        const descent = retrievedLabel.descent.contents;\n        const height = retrievedLabel.height.contents;\n        const centerY = y + (height / 2 - descent);\n        elem.setAttribute(\"x\", x.toString());\n        elem.setAttribute(\"y\", centerY.toString());\n        attrToNotAutoMap.push(...attrWH(shape, elem));\n    }\n    else {\n        elem.setAttribute(\"x\", x.toString());\n        elem.setAttribute(\"y\", y.toString());\n    }\n    // Directly Map across any \"unknown\" SVG properties\n    attrAutoFillSvg(shape, elem, attrToNotAutoMap);\n    return elem;\n};\nexport default Text;\n//# sourceMappingURL=Text.js.map","import Circle from \"./Circle\";\nimport Ellipse from \"./Ellipse\";\nimport Equation from \"./Equation\";\nimport Image from \"./Image\";\nimport Line from \"./Line\";\nimport Path from \"./Path\";\nimport Polygon from \"./Polygon\";\nimport Polyline from \"./Polyline\";\nimport Rectangle from \"./Rectangle\";\nimport Text from \"./Text\";\nconst shapeMap = {\n    Circle,\n    Ellipse,\n    Rectangle,\n    Polygon,\n    Polyline,\n    Equation,\n    Path,\n    Line,\n    Image,\n    Text,\n};\nexport default shapeMap;\n//# sourceMappingURL=shapeMap.js.map","/* Renderer.ts\n *\n * A simple translation layer for turning Shapes into SVG tags.\n *\n */\nimport { shapedefs } from \"../shapes/Shapes\";\nimport { dragUpdate } from \"./dragUtils\";\nimport shapeMap from \"./shapeMap\";\n/**\n * Turns Shape GPI data into a corresponding SVG element\n */\nexport const RenderShape = async ({ shape, labels, canvasSize, pathResolver, }) => {\n    if (!(shape.shapeType in shapeMap)) {\n        console.error(`${shape.shapeType} shape doesn't exist in shapeMap`);\n        return document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n    }\n    return await shapeMap[shape.shapeType]({\n        shape,\n        labels,\n        canvasSize,\n        pathResolver,\n    });\n};\n/**\n * Converts screen to relative SVG coords\n * Thanks to\n * https://www.petercollingridge.co.uk/tutorials/svg/interactive/dragging/\n * @param e\n * @param svg\n */\nconst getPosition = ({ clientX, clientY }, svg) => {\n    const CTM = svg.getScreenCTM();\n    if (CTM !== null) {\n        return { x: (clientX - CTM.e) / CTM.a, y: (clientY - CTM.f) / CTM.d };\n    }\n    return { x: 0, y: 0 };\n};\n/**\n * Makes a shape draggable. Browser only.\n * @param onDrag callback when drag complete\n * @param parentSVG\n * @param canvasSizeCustom\n */\nexport const DraggableShape = async (shapeProps, onDrag, parentSVG, canvasSizeCustom) => {\n    const canvas = shapeProps.canvasSize;\n    const elem = await RenderShape(Object.assign(Object.assign({}, shapeProps), { canvasSize: canvasSizeCustom ? canvasSizeCustom : canvas }));\n    const g = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n    const { shapeType } = shapeProps.shape;\n    if (shapedefs[shapeType].isLinelike) {\n        g.setAttribute(\"pointer-events\", \"visibleStroke\");\n    }\n    else if (shapedefs[shapeType].isRectlike) {\n        g.setAttribute(\"pointer-events\", \"bounding-box\");\n    }\n    else {\n        g.setAttribute(\"pointer-events\", \"auto\");\n    }\n    g.appendChild(elem);\n    const onMouseDown = (e) => {\n        const { clientX, clientY } = e;\n        const { x: tempX, y: tempY } = getPosition({ clientX, clientY }, parentSVG);\n        const { width: bboxW, height: bboxH, x: bboxX, y: bboxY, } = e.target.getBBox({ stroke: true });\n        const minX = tempX - bboxX;\n        const maxX = canvas[0] - bboxW + (tempX - bboxX);\n        const minY = tempY - bboxY;\n        const maxY = canvas[1] - bboxH + (tempY - bboxY);\n        g.setAttribute(\"opacity\", \"0.5\");\n        let dx = 0, dy = 0;\n        const onMouseMove = (e) => {\n            const { x, y } = getPosition(e, parentSVG);\n            const constrainedX = clamp(x, minX, maxX);\n            const constrainedY = clamp(y, minY, maxY);\n            dx = constrainedX - tempX;\n            dy = tempY - constrainedY;\n            g.setAttribute(`transform`, `translate(${dx},${-dy})`);\n        };\n        const onMouseUp = () => {\n            g.setAttribute(\"opacity\", \"1\");\n            document.removeEventListener(\"mouseup\", onMouseUp);\n            document.removeEventListener(\"mousemove\", onMouseMove);\n            onDrag(shapeProps.shape.properties.name.contents, dx, dy);\n        };\n        document.addEventListener(\"mouseup\", onMouseUp);\n        document.addEventListener(\"mousemove\", onMouseMove);\n    };\n    g.addEventListener(\"mousedown\", onMouseDown);\n    return g;\n};\n/**\n *\n * @param state\n * @param updateState Callback for drag-updated state\n * @param pathResolver Resolves paths to static strings\n * @returns\n */\nexport const RenderInteractive = async (state, updateState, pathResolver) => {\n    const svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n    svg.setAttribute(\"xmlns\", \"http://www.w3.org/2000/svg\");\n    svg.setAttribute(\"width\", \"100%\");\n    svg.setAttribute(\"height\", \"100%\");\n    svg.setAttribute(\"version\", \"1.2\");\n    svg.setAttribute(\"viewBox\", `0 0 ${state.canvas.width} ${state.canvas.height}`);\n    const onDrag = (id, dx, dy) => {\n        updateState(dragUpdate(state, id, dx, dy));\n    };\n    for (const shape of state.computeShapes(state.varyingValues)) {\n        svg.appendChild(await DraggableShape({\n            shape,\n            labels: state.labelCache,\n            canvasSize: state.canvas.size,\n            pathResolver,\n        }, onDrag, svg));\n    }\n    return svg;\n};\n/**\n * Renders a static SVG of the shapes and labels.\n * @param pathResolver Resolves paths to static strings\n */\nexport const RenderStatic = async (state, pathResolver) => {\n    const { varyingValues, computeShapes, labelCache: labels, canvas } = state;\n    const svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n    svg.setAttribute(\"version\", \"1.2\");\n    svg.setAttribute(\"xmlns\", \"http://www.w3.org/2000/svg\");\n    svg.setAttribute(\"viewBox\", `0 0 ${canvas.width} ${canvas.height}`);\n    return Promise.all(computeShapes(varyingValues).map((shape) => RenderShape({\n        shape,\n        labels,\n        canvasSize: canvas.size,\n        pathResolver,\n    }))).then((renderedShapes) => {\n        for (const shape of renderedShapes) {\n            svg.appendChild(shape);\n        }\n        return svg;\n    });\n};\nconst clamp = (x, min, max) => Math.min(Math.max(x, min), max);\n//# sourceMappingURL=Renderer.js.map","import { genOptProblem } from \"@penrose/optimizer\";\nimport seedrandom from \"seedrandom\";\nimport { checkDomain, compileDomain, parseDomain } from \"./compiler/Domain\";\nimport { compileStyle } from \"./compiler/Style\";\nimport { checkSubstance, compileSubstance, parseSubstance, prettySubstance, } from \"./compiler/Substance\";\nimport { RenderInteractive, RenderShape, RenderStatic, } from \"./renderer/Renderer\";\nimport { showMutations } from \"./synthesis/Mutation\";\nimport { Synthesizer } from \"./synthesis/Synthesizer\";\nimport { collectLabels, insertPending } from \"./utils/CollectLabels\";\nimport { andThen, err, nanError, ok, showError } from \"./utils/Error\";\nimport { bBoxDims, normList, prettyPrintExpr, prettyPrintFn, prettyPrintPath, safe, toSvgPaintProperty, } from \"./utils/Util\";\n/**\n * Use the current resample seed to sample all shapes in the State.\n * @param state current state\n */\nexport const resample = (state) => {\n    const rng = seedrandom(state.variation);\n    const { constraintSets, optStages } = state;\n    const { inputMask, objMask, constrMask } = safe(constraintSets.get(optStages[0]), \"missing first stage\");\n    return insertPending(Object.assign(Object.assign({}, state), { varyingValues: state.inputs.map((meta) => meta.init.tag === \"Sampled\" ? meta.init.sampler(rng) : meta.init.pending), currentStageIndex: 0, params: genOptProblem(inputMask, objMask, constrMask) }));\n};\n/**\n * Take n steps in the optimizer given the current state.\n * @param state current state\n * @param numSteps number of steps to take (default: 10000)\n */\nexport const stepState = (state, numSteps = 10000) => {\n    const steppedState = Object.assign(Object.assign({}, state), state.gradient.step(state, numSteps));\n    if (stateConverged(steppedState) && !finalStage(steppedState)) {\n        const nextInitState = nextStage(steppedState);\n        return nextInitState;\n    }\n    else {\n        return steppedState;\n    }\n};\nexport const nextStage = (state) => {\n    if (finalStage(state)) {\n        return state;\n    }\n    else {\n        const { constraintSets, optStages, currentStageIndex } = state;\n        const nextStage = optStages[currentStageIndex + 1];\n        const { inputMask, objMask, constrMask } = safe(constraintSets.get(nextStage), \"missing next stage\");\n        return Object.assign(Object.assign({}, state), { currentStageIndex: currentStageIndex + 1, params: genOptProblem(inputMask, objMask, constrMask) });\n    }\n};\nexport const stepNextStage = (state, numSteps = 10000) => {\n    let currentState = state;\n    while (!(currentState.params.optStatus === \"Error\") &&\n        !stateConverged(currentState)) {\n        currentState = Object.assign(Object.assign({}, currentState), currentState.gradient.step(currentState, numSteps));\n    }\n    return nextStage(currentState);\n};\n/**\n * Take n steps in the optimizer given the current state.\n * @param state current state\n * @param numSteps number of steps to take (default: 10000)\n */\nexport const stepStateSafe = (state, numSteps = 10000) => {\n    const res = stepState(state, numSteps);\n    if (res.params.optStatus === \"Error\") {\n        return err(Object.assign({ errorType: \"RuntimeError\" }, nanError(\"\", res)));\n    }\n    return ok(res);\n};\n/**\n * Repeatedly take one step in the optimizer given the current state until convergence.\n * @param state current state\n */\nexport const stepUntilConvergence = (state, numSteps = 10000) => {\n    let currentState = state;\n    while (!(currentState.params.optStatus === \"Error\") &&\n        (!stateConverged(currentState) || !finalStage(currentState))) {\n        if (stateConverged(currentState)) {\n            currentState = nextStage(currentState);\n        }\n        currentState = stepState(currentState, numSteps);\n    }\n    if (currentState.params.optStatus === \"Error\") {\n        return err(Object.assign({ errorType: \"RuntimeError\" }, nanError(\"\", currentState)));\n    }\n    return ok(currentState);\n};\nconst stepUntilConvergenceOrThrow = (state) => {\n    const result = stepUntilConvergence(state);\n    if (result.isErr()) {\n        throw Error(showError(result.error));\n    }\n    else {\n        return result.value;\n    }\n};\n/**\n * Embed a static Penrose diagram in a DOM node.\n *\n * @param domainProg a Domain program string\n * @param subProg a Substance program string\n * @param styProg a Style program string\n * @param node a node in the DOM tree\n */\nexport const diagram = async (prog, node, pathResolver) => {\n    const res = await compileTrio(prog);\n    if (res.isOk()) {\n        const state = await prepareState(res.value);\n        const optimized = stepUntilConvergenceOrThrow(state);\n        const rendered = await RenderStatic(optimized, pathResolver);\n        node.appendChild(rendered);\n    }\n    else {\n        throw Error(`Error when generating Penrose diagram: ${showError(res.error)}`);\n    }\n};\n/**\n * Embed an interactive Penrose diagram in a DOM node.\n *\n * @param domainProg a Domain program string\n * @param subProg a Substance program string\n * @param styProg a Style program string\n * @param node a node in the DOM tree\n */\nexport const interactiveDiagram = async (prog, node, pathResolver) => {\n    const updateData = async (state) => {\n        const stepped = stepUntilConvergenceOrThrow(state);\n        const rendering = await RenderInteractive(stepped, updateData, pathResolver);\n        node.replaceChild(rendering, node.firstChild);\n    };\n    const res = await compileTrio(prog);\n    if (res.isOk()) {\n        const state = await prepareState(res.value);\n        const optimized = stepUntilConvergenceOrThrow(state);\n        const rendering = await RenderInteractive(optimized, updateData, pathResolver);\n        node.appendChild(rendering);\n    }\n    else {\n        throw Error(`Error when generating Penrose diagram: ${showError(res.error)}`);\n    }\n};\n/**\n * Given a trio of Domain, Substance, and Style programs, compile them into an initial `State`. Note that this function does _not_ evaluate the shapes. Generation of shapes is handled in `prepareState`.\n * @param domainProg a Domain program string\n * @param subProg a Substance program string\n * @param styProg a Style program string\n */\nexport const compileTrio = async (prog) => {\n    const domainRes = compileDomain(prog.domain);\n    const subRes = andThen((env) => compileSubstance(prog.substance, env), domainRes);\n    const styRes = subRes.isErr()\n        ? err(subRes.error)\n        : await compileStyle(prog.variation, prog.style, ...subRes.value);\n    return styRes;\n};\n/**\n * Collect labels and images (if applicable).\n * @param state an initial diagram state\n */\nexport const prepareState = async (state) => {\n    const labelCache = await collectLabels(state.shapes);\n    if (labelCache.isErr()) {\n        throw Error(showError(labelCache.error));\n    }\n    return insertPending(Object.assign(Object.assign({}, state), { labelCache: labelCache.value }));\n};\n/**\n * Returns true if state is converged\n * @param state current state\n */\nexport const stateConverged = (state) => state.params.optStatus === \"EPConverged\";\n/**\n * Returns true if the diagram state is on the last layout stage in the layout pipeline\n * @param state current state\n */\nexport const finalStage = (state) => state.currentStageIndex === state.optStages.length - 1;\n/**\n * Returns true if state is the initial frame\n * @param state current state\n */\nexport const stateInitial = (state) => state.params.optStatus === \"NewIter\";\n/**\n * Read and flatten the registry file for Penrose examples into a list of program trios.\n *\n * @param registry JSON file of the registry\n * @param galleryOnly Only return trios where `gallery === true`\n */\nexport const readRegistry = (registry, galleryOnly) => {\n    const { substances, styles, domains, trios } = registry;\n    const res = [];\n    for (const trioEntry of trios) {\n        const { domain: dslID, style: styID, substance: subID, variation, gallery, name, } = trioEntry;\n        const domain = domains[dslID];\n        const substance = substances[subID];\n        const style = styles[styID];\n        const trio = {\n            substanceURI: registry.root + substance.URI,\n            styleURI: registry.root + style.URI,\n            domainURI: registry.root + domain.URI,\n            substanceID: subID,\n            domainID: dslID,\n            styleID: styID,\n            variation,\n            name: name !== null && name !== void 0 ? name : `${subID}-${styID}`,\n            id: `${subID}-${styID}`,\n            gallery: gallery !== null && gallery !== void 0 ? gallery : false,\n        };\n        if (!galleryOnly || trioEntry.gallery) {\n            res.push(trio);\n        }\n    }\n    return res;\n};\n/**\n * Evaluate the overall energy of a `State`. If the `State` does not have an optimization problem initialized (i.e. it doesn't have a defined `objectiveAndGradient` field), this function will call `genOptProblem` to initialize it. Otherwise, it will evaluate the cached objective function.\n * @param s a state with or without an optimization problem initialized\n * @returns a scalar value of the current energy\n */\nexport const evalEnergy = (s) => {\n    // TODO: maybe don't also compute the gradient, just to throw it away\n    return s.gradient.call([...s.varyingValues, s.params.weight]).primary;\n};\n/**\n * Evaluate a list of constraints/objectives: this will be useful if a user want to apply a subset of constrs/objs on a `State`. This function assumes that the state already has the objectives and constraints compiled.\n * @param fns a list of constraints/objectives\n * @param s a state with its opt functions cached\n * @returns a list of the energies of the requested functions, evaluated at the `varyingValues` in the `State`\n */\nexport const evalFns = (s) => {\n    const { constrFns, objFns } = s;\n    // Evaluate the energy of each requested function (of the given type) on the varying values in the state\n    let { lastObjEnergies, lastConstrEnergies } = s.params;\n    if (lastObjEnergies === null || lastConstrEnergies === null) {\n        const { secondary } = s.gradient.call([\n            ...s.varyingValues,\n            s.params.weight,\n        ]);\n        lastObjEnergies = secondary.slice(0, s.params.objMask.length);\n        lastConstrEnergies = secondary.slice(s.params.objMask.length);\n    }\n    return {\n        constrEngs: lastConstrEnergies,\n        objEngs: lastObjEnergies,\n    };\n};\nexport { constrDict } from \"./contrib/Constraints\";\nexport { compDict } from \"./contrib/Functions\";\nexport { objDict } from \"./contrib/Objectives\";\nexport { secondaryGraph } from \"./engine/Autodiff\";\nexport { makeCanvas, simpleContext } from \"./shapes/Samplers\";\nexport { shapedefs } from \"./shapes/Shapes\";\nexport * as Value from \"./types/value\";\nexport { hexToRgba, rgbaToHex, zip2 } from \"./utils/Util\";\nexport { compileDomain, compileSubstance, checkDomain, checkSubstance, parseSubstance, parseDomain, Synthesizer, showMutations, RenderShape, RenderInteractive, RenderStatic, bBoxDims, prettySubstance, showError, prettyPrintFn, prettyPrintPath, prettyPrintExpr, normList, toSvgPaintProperty, };\n//# sourceMappingURL=index.js.map","export default async function fetchResolver(\n  path: string\n): Promise<string | undefined> {\n  const response = await fetch(path);\n  if (!response.ok) {\n    console.error(`could not fetch ${path}`);\n    return undefined;\n  }\n  return await response.text();\n}\n","import {\n  compileTrio,\n  PenroseError,\n  PenroseState,\n  prepareState,\n  RenderInteractive,\n  RenderStatic,\n  resample,\n  showError,\n  stateConverged,\n  stepState,\n  stepUntilConvergence,\n} from \"@penrose/core\";\nimport React from \"react\";\nimport fetchResolver from \"./fetchPathResolver\";\n\nexport interface SimpleProps {\n  domain: string;\n  substance: string;\n  style: string;\n  variation: string;\n  stepSize?: number;\n  interactive?: boolean; // considered true by default\n  animate?: boolean; // considered false by default\n  onFrame?: (frame: PenroseState) => void;\n}\n\nexport interface SimpleState {\n  error?: PenroseError;\n}\n\nclass Simple extends React.Component<SimpleProps, SimpleState> {\n  readonly canvasRef = React.createRef<HTMLDivElement>();\n  penroseState: PenroseState | undefined = undefined;\n  timerID: number | undefined = undefined; // for animation\n\n  constructor(props: SimpleProps) {\n    super(props);\n    this.state = {\n      error: undefined,\n    };\n  }\n\n  compile = async (): Promise<void> => {\n    this.penroseState = undefined;\n    const compilerResult = await compileTrio(this.props);\n    if (compilerResult.isOk()) {\n      this.penroseState = await prepareState(compilerResult.value);\n    } else {\n      this.setState({ error: compilerResult.error });\n    }\n  };\n\n  converge = async (): Promise<void> => {\n    if (this.penroseState) {\n      const stepped = stepUntilConvergence(this.penroseState);\n      if (stepped.isOk()) {\n        this.penroseState = stepped.value;\n      } else {\n        this.setState({ error: stepped.error });\n      }\n    }\n  };\n\n  tick = () => {\n    if (\n      this.props.animate &&\n      this.penroseState &&\n      !stateConverged(this.penroseState)\n    ) {\n      this.penroseState = stepState(\n        this.penroseState,\n        this.props.stepSize ?? 1\n      );\n      if (this.props.onFrame) {\n        this.props.onFrame(this.penroseState);\n      }\n      this.renderCanvas();\n    }\n  };\n\n  componentDidMount = async () => {\n    await this.compile();\n    if (!this.props.animate) {\n      await this.converge();\n    }\n    this.renderCanvas();\n    this.timerID = window.setInterval(() => this.tick(), 1000 / 60);\n  };\n\n  componentDidUpdate = async (prevProps: SimpleProps) => {\n    // re-compile if the programs change\n    if (\n      this.props.domain !== prevProps.domain ||\n      this.props.substance !== prevProps.substance ||\n      this.props.style !== prevProps.style\n    ) {\n      await this.compile();\n      if (!this.props.animate) {\n        await this.converge();\n      }\n      this.renderCanvas();\n    }\n\n    // update the component only if there's no error\n    // in the case of an error, they component should not attempt to re-render\n    if (this.penroseState && !this.state.error) {\n      if (\n        this.props.variation !== prevProps.variation ||\n        this.props.animate !== prevProps.animate\n      ) {\n        this.penroseState.variation = this.props.variation;\n        this.penroseState = resample(this.penroseState);\n        if (!this.props.animate) {\n          await this.converge();\n        }\n        this.renderCanvas();\n      } else if (this.props.interactive !== prevProps.interactive) {\n        this.renderCanvas();\n      }\n    }\n  };\n\n  componentWillUnmount = () => {\n    clearInterval(this.timerID);\n  };\n\n  renderCanvas = async () => {\n    if (this.canvasRef.current === null) {\n      return <div>rendering...</div>;\n    } else {\n      const node = this.canvasRef.current;\n      if (this.penroseState) {\n        const renderedState: SVGSVGElement = await (this.props.interactive ===\n        false\n          ? RenderStatic(this.penroseState, fetchResolver)\n          : RenderInteractive(\n              this.penroseState,\n              async (newState) => {\n                this.penroseState = newState;\n                if (!this.props.animate) {\n                  await this.converge();\n                }\n                this.renderCanvas();\n              },\n              fetchResolver\n            ));\n        if (node.firstChild !== null) {\n          node.replaceChild(renderedState, node.firstChild);\n        } else {\n          node.appendChild(renderedState);\n        }\n      } else {\n        console.log(\"state is undefined\");\n      }\n    }\n  };\n\n  render = () => {\n    const { error } = this.state;\n    return (\n      <div style={{ width: \"100%\", height: \"100%\" }}>\n        {!error && (\n          <div style={{ width: \"100%\", height: \"100%\" }} ref={this.canvasRef} />\n        )}\n        {error && (\n          <div style={{ padding: \"1em\", height: \"100%\" }}>\n            <div style={{ fontWeight: 700 }}>1 error:</div>\n            <div style={{ fontFamily: \"monospace\" }}>\n              {showError(error)\n                .toString()\n                .split(\"\\n\")\n                .map((line: string, key: number) => (\n                  <p key={`err-ln-${key}`} style={{ margin: 0 }}>\n                    {line}\n                  </p>\n                ))}\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  };\n}\n\nexport { Simple };\n"],"names":["dragUpdate","__name","state","id","dx","dy","xs","constraintSets","optStages","inputMask","objMask","constrMask","gradMask","shape","dragShape","genOptProblem","offset","shapeType","properties","moveProperties","propsToMove","ids","propertyID","value","x","y","attrMapSvg","attrAutoFillSvg","elem","attrAlreadyMapped","attrToNeverAutoMap","attrToNotAutoMap","propName","propValue","mappedPropName","style","attrFill","color","alpha","toSvgOpacityProperty","toSvgPaintProperty","attrCenter","canvasSize","center","toScreen","attrScale","scale","transform","attrTransformCoords","w","h","attrXY","attrRotation","rotation","attrWH","attrCornerRadius","rx","attrString","str","text","DASH_ARRAY","attrStroke","attrMapped","strokeColor","strokeAlpha","thickness","attrTitle","name","title","attrFont","fontString","toFontRule","existingStyle","attrPolyPoints","pointsTransformed","p","Circle","Ellipse","Equation","labels","labelFound","retrievedLabel","getAdValueAsString","renderedLabel","g","fontSize","txt","image","Image","pathResolver","path","rawSVG","notFound.image","svg","defs","node","user","unique","arrowHead","opacity","arrow","size","flip","marker","round2","key","makeRoomForArrows","startArrowhead","endArrowhead","lineSX","lineSY","lineEX","lineEY","startArrowheadSize","endArrowheadSize","length","arrowSX","arrowSY","startArrowWidth","arrowEX","arrowEY","endArrowWidth","Line","getArrowhead","sx","sy","ex","ey","startArrowId","endArrowId","pathElem","toPathString","pathData","pathCmd","cmd","contents","pathStr","_","c","Shadow","Path","shadowId","strokeWidth","strokeOpacity","fillColor","fillOpacity","Polygon","Polyline","Rectangle","Text","descent","height","centerY","shapeMap","RenderShape","getPosition","clientX","clientY","CTM","DraggableShape","shapeProps","onDrag","parentSVG","canvasSizeCustom","canvas","shapedefs","onMouseDown","e","tempX","tempY","bboxW","bboxH","bboxX","bboxY","minX","maxX","minY","maxY","onMouseMove","constrainedX","clamp","constrainedY","onMouseUp","RenderInteractive","updateState","RenderStatic","varyingValues","computeShapes","renderedShapes","min","max","resample","rng","seedrandom","safe","insertPending","meta","stepState","numSteps","steppedState","stateConverged","finalStage","nextStage","currentStageIndex","stepUntilConvergence","currentState","err","nanError","ok","compileTrio","prog","domainRes","compileDomain","subRes","andThen","env","compileSubstance","compileStyle","prepareState","labelCache","collectLabels","showError","fetchResolver","response","Simple","React","undefined","props","compilerResult","error","stepped","prevProps","clearInterval","_jsx","renderedState","newState","console","_jsxs","canvasRef","line"],"mappings":"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"}